### KEY COMMANDS BY DIMITRI KESTEMONT ###

### GIT ###
brew install git: install command for mac.
brew upgrade git: keep Git up to date for the latest features and security fixes (mac).
git --version / git -v : verifies which version of git is installed.
git config --list: to see all your Git settings.
git config user.name: to see a specific value.
git config --global core.editor "code --wait": Set VS Code as Default Editor.
git config --global user.name "Your Name": configure your user name.
git config --global user.email "you@example.com": configure your email adress.
#There are three levels of configuration:
#1. System (all users): git config --system. System settings apply to all repositories for all users.
#2. Global (current user): git config --global. Global settings apply to all repositories for the current user.
#3. Local (current repo): git config --local. Local settings only apply to the current repository.
--unset: to remove a setting.
# example : git config --global --unset code.editor
git config --global init.defaultBranch main: Set the default branch name for new repositories (for example, main instead of master)

pwd: check your current directory.
ls: This command lists the files in your current folder.
ls -a: Show Hidden .git Folder
cd: changes working directory
mkdir: creates a new directory.

git init: initialize Git on the selected folder.
# creates Git Repository, (hidden) folder that stores all your project's history and versions.
git status: Check which files are tracked, see what is staged

git add <file>: Stage a file
# The staging environment (or staging area) is like a waiting room for your changes. Waiting for the next commit
git add --all or git add -A: Stage all changes (new, modified, and deleted files) at once
git restore --staged <file>: Unstage a file

git commit: Saves a snapshot of your project with a message.
git commit -m "message": Commit staged changes with a message
git commit -a -m "message": Commit all tracked changes (skip staging)
# Skipping the staging step can make you include unwanted changes. Use with care.
git commit --amend: to add it to your last commit if you had run git commit -m "message" but forgot to git add a file.
git commit --amend -m "Corrected message": to fix the last commit message.
git reset --soft HEAD~1: to undo the last commit and keep your changes staged.
git log: To view the full history of commits for a repository
git log --oneline: For a summary of commits
git log --oneline --graph --all --decorate: draws a graph on the left side showing branches and merges.
git log --stat: To see which files changed in each commit
git show <commit>: Show details of a specific commit (git show 14c9)

git tag <tagname>: Create a lightweight tag (git tag v1.0)
git tag -a <tagname> -m "message": Create an annotated tag (git tag -a v1.0 -m "Version 1.0 release")
git tag <tagname> <commit-hash>: Tag a specific commit
git tag: List tags
git show <tagname>: Show tag details (git show v1.0)
# A tag in Git is like a label for a specific commit, by default, tags exist only on your local computer.
# Use tags to mark releases, major milestones, or stable points in your project.
# Always use annotated tags (with -a -m) for anything public or shared.
# Create tags after passing all tests or before deploying/releasing code.
git push origin v1.0: push a single tag to your remote repository
git push --tags: push all your local tags to the remote at once
git tag -d v1.0: delete a tag locally
git push origin --delete tag v1.0: delete a tag from the remote repository

git stash: lets you save your uncommitted changes and return to a clean working directory.

git diff: See unstaged changes
git diff --staged: See staged changes

git help <command>: See the manual page for a command
git <command> --help: See help for a command (same as above)
git <command> -h: See a quick summary of options
git help --all: List all possible Git commands
git help -g: List guides and concepts

git branch: see all branches in your repository
checkout: command used to check out a branch (git checkout hello-world-image)
git checkout -b dev: create new branch 

git merge: Merge a branch into your current branch
git merge --no-ff: Always create a merge commit
git merge --squash: Combine changes into a single commit
git merge --abort: Abort a merge in progress

git restore <file>: Undo changes in your working directory (before staging).
git restore --staged <file>: Unstage a file (move it out of the Staging Area).
git reset HEAD~: Undo your last commit (keeps changes in your working directory).
git commit --amend: Change the last commit message or add files to your last commit.

git rm <file>: removes single file
git rm -r <GIT_pandas-examples>: removes a directory recursively (all files inside).
git rm --cached <file>: removes file from the staging area (the index), but keep the file on your computer.
.gitignore: to prevent tracking of build artifacts, logs, and secrets

### KEY CONCEPTS ###
Repository: A folder where Git tracks your project and its history.
Clone: Make a copy of a remote repository on your computer.
Stage: Tell Git which changes you want to save next.
Commit: Save a snapshot of your staged changes.
Branch: Work on different versions or features at the same time.
Merge: Combine changes from different branches.
Pull: Get the latest changes from a remote repository.
Push: Send your changes to a remote repository.

### GITHUB ###
ssh-keygen: Generate a new SSH key pair
ssh-add: Add your private key to the SSH agent
ssh -T git@github.com: Test SSH connection
ssh-add -l: List loaded SSH keys
ssh-add -d: Remove a key from agent (ssh-add -d ~/.ssh/id_rsa)

eval $(ssh-agent -s): enable SSH agent
ssh-keygen -t rsa -b 4096 -C "your@email.com": generate SSH Key
ssh-add ~/.ssh/id_rsa: add Key to SSH agent (whenever you need to push to github from new connection terminal)
pbcopy < ~/.ssh/id_rsa.pub: copy public key

git fetch: downloads new data from a remote repository, but does not change your working files or branches. It lets you see what others have pushed before you merge or pull.
git remote -v: shows the GitHub repo that it is connected to
git remote set-url origin git@github.com:DimitriKestemont/campus-numerique.git: sets remote to SSH if it is set to HTTPS   

